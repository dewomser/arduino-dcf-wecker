/*Version wecker6_lcd

 * TimeZones.ino
 * example code illustrating time synced from a DCF77 receiver
 * Thijs Elenbaas, 2012
 * This example code is in the public domain.

  This example shows how to fetch a DCF77 time and synchronize
  the internal clock. In order for this example to give clear output,
  make sure that you disable logging  from the DCF library. You can 
  do this by commenting out   #define VERBOSE_DEBUG 1   in Utils.cpp. 
 */
 // include the library code:
#include <LiquidCrystal.h>

// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(12, 11, 5, 4, 1, 2); 
 
 
#define DCF_PIN 3	         // Connection pin to DCF 77 device
#define DCF_INTERRUPT 0	          // Interrupt number associated with pin


int led = 7;         // alarm Relais
int  stunde = 0;     // alarm hour stored in this variable
int  minuten = 0;
int value;           //für eeprom lesen
int endlos = 0;
int ergebnis;
int teilung;

#include <EEPROM.h>
#include <DCF77.h>       //https://github.com/thijse/Arduino-Libraries/downloads
#include <Time.h>        //http://www.arduino.cc/playground/Code/Time
#include <Timezone.h>    //https://github.com/JChristensen/Timezone



// #include <utility/w5100.h>

	

// more time zones, see  http://en.wikipedia.org/wiki/Time_zones_of_Europe
//United Kingdom (London, Belfast)
TimeChangeRule rBST = {"BST", Last, Sun, Mar, 1, 60};        //British Summer Time
TimeChangeRule rGMT = {"GMT", Last, Sun, Oct, 2, 0};         //Standard Time
Timezone UK(rBST, rGMT);

//Eastern European Time (Finland, Greece, etc)
TimeChangeRule rEST = {"EST", Last, Sun, Mar, 1, 180};      //Eastern European Time
TimeChangeRule rEET = {"EET", Last, Sun, Oct, 1, 120};      //Eastern European Summer Time
Timezone EET(rEST, rEET);

//Central European Time (Germany)
TimeChangeRule rCEST = {"CEST", Last, Sun, Mar, 2, 120};      //Central European Summer Time
TimeChangeRule rCET = {"CET", Last, Sun, Oct, 3, 60};      //Central European Time
Timezone CE(rCEST, rCET);



time_t prevDisplay = 0;          // when the digital clock was displayed
time_t time;
DCF77 DCF = DCF77(DCF_PIN,DCF_INTERRUPT);


void setup() {
  
  pinMode(led, OUTPUT);
  Serial.begin(9600);
  
  DCF.Start();
  setSyncInterval(30);
  setSyncProvider(getDCFTime);
  // It is also possible to directly use DCF.getTime, but this function gives a bit of feedback
  //setSyncProvider(DCF.getTime);
  
  //Weckzeit ist im EEPROM 
stunde = EEPROM.read(0); 
minuten = EEPROM.read(1);

// Hier kommt das LCD-Display vor der Weckzeit-Änderung
 
  lcd.begin(16, 2);
  lcd.setCursor(0,0);
  lcd.print("Alarm:"); 
  lcd.print(stunde);
  lcd.print(":");
  lcd.print(minuten);

//serielle Eingabe Anfang
 
 
   //in 30 Sekunden sollte eine Verbindung aufgebaut sein
   //wenn nicht, dann Betrieb mit Netzteil   
        delay (30000);
    

Serial.print("Nerdwecker:");
Serial.println("Aktuelle Weckzeit"); 

Serial.print((stunde),DEC);
Serial.print(":");

Serial.print((minuten),DEC);
Serial.print(" Uhr. ");

  // Wenn nicht serial dann überspringe Input
if( Serial )
   {
Serial.println("neuer Alarm Stunde angeben");
stunde = zeiteingabe(0,stunde);
Serial.println("neuer Alarm Minute angeben");
minuten = zeiteingabe(1,minuten);
}
Serial.println("neuer Alarm :"); 

// Hier kommt das LCD-Display nach der Weckkzeit-Änderung
  lcd.begin(16, 2);
  lcd.setCursor(0,0);
  lcd.print("Alarm:"); 
  printDigits_h(stunde);
  printDigits(minuten);

  Serial.println("Warten auf das DCF77 fuer Deutschland ... ");
  Serial.println("Es dauert mindestens 2 Minuten bis eine Uhrzeit angezeigt wird.");
 
  while(timeStatus()== timeNotSet) { 
     // wait until the time is set by the sync provider     
     Serial.print(".");
     delay(2000);
  }
}
//serielle Eingabe-Ende

void loop()
{    
  if(hour() == stunde && minute() == minuten)
  {
   digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
  }
else
  {
  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
  }  
  
  if( now() != prevDisplay) //update the display only if the time has changed
  {
    prevDisplay = now();
    digitalClockDisplay();  
  }
}

void digitalClockDisplay(){
  // digital clock display of the time
  lcd.setCursor(0, 1);
  Serial.println("");
  printDigits_h(hour());
  printDigits(minute());
  printDigits(second());
  Serial.print(" ");
  Serial.print(day());
  Serial.print(" ");
  Serial.print(month());
  Serial.print(" ");
  Serial.print(year()); 
  Serial.println(); 
}

void printDigits(int digits){
  // utility function for digital clock display: prints preceding colon and leading 0
  Serial.print(":");
  lcd.print(":");
  if(digits < 10)
  {
    Serial.print('0');
    lcd.print('0');
  }
  Serial.print(digits);
  lcd.print(digits);
}

void printDigits_h(int digits){
  // utility function for digital clock display: prints preceding  leading 0. Bei Stunden ohnr :
    if(digits < 10)
  {
    Serial.print('0');
    lcd.print('0');
  }
  Serial.print(digits);
  lcd.print(digits);
}

unsigned long getDCFTime()
{ 
  time_t DCFtime = DCF.getUTCTime(); // Convert from UTC
  
  if (DCFtime!=0) {
    Serial.print("X");    // Indicator that a time check is done
    time_t LocalTime = CE.toLocal(DCFtime);
    return LocalTime;
  }
  return 0;
}



// Da kommt die Funktion für die Zeiteingabe


int zeiteingabe (int zeiteinheit , int zeitwert)

{
while(endlos == 0)
 {
if( Serial.available())
   {
    char ch = Serial.read();
    if(ch >= '0' && ch <= '9') // is this an ascii digit between 0 and 9?
    {
       value = (value * 10) + (ch - '0'); // yes, accumulate the value
    }
    else if (ch == 10)  // is the character the newline character
    {
       zeitwert = value;  // set blinkrate to the accumulated value
       Serial.println(zeitwert);
       EEPROM.write(zeiteinheit, zeitwert);
       ergebnis=zeitwert;
       value = 0; // reset val to 0 ready for the next sequence of digits
       break;
    }
  }
 
 }
return ergebnis;
}
